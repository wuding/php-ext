<?php

namespace Ext\Appendices\Indexes;

class FunctionAndMethodListing
{
    const VERSION = '22.3.27';

    public $a =  array(
        'abs' => 'Absolute value',
        'acos' => 'Arc cosine',
        'acosh' => 'Inverse hyperbolic cosine',
        'adddcslashes' => 'Quote string with slashes in a C style',
        'addslashes' => 'Quote string with slashes',
        'apache_child_teminate' => 'TTerminate apache proces afer this request',
        'apache_getenv' => 'Get an Apache subprocess_env variable',
        'apache_get_modules' => 'Get a list of loaded Apache modules',
        'apache_get_version' => 'Fetch Apache version',
        'apache_look_uri' => 'Perform a partial request for the specified URI and return all info about it',
        'apache_note' => 'Get and set apache request notes',
        'apache_request_headers' => 'Fetch all HTTP request headers',
        'apache_response_headers' => 'Fetch all HTTP respone headers',
        'apache_setenv' => 'Set an Apache subprocess_env variable',
        'APCUIterator::current' => 'Get current item',
        'APCUIterator::getTotalCount' => 'Get total count',
        'APCUIterator::getTotalHits' => 'Get total cache hits',
        'APCUIterator::getTotalSize' => 'Get total cache size',
        'APCUIterator::key' => 'Get iterator key',
        'APCUIterator::next' => 'Move pointer to next item',
        'APCUIterator::rewind' => 'Rewinds iterator',
        'APCUIterator::valid' => 'Checks if current position id valid',
        'APCUIterator::__construct' => 'Constructs an APCIterator object',
        'apcu_add' => 'Cache a new variable in the data store',
        'apcu_cache_info' => "Retrieves cached information from APCu's data store",
        'apcu_cas' => 'Updates an old value with va new value',
        'apcu_clear_cache' => 'Clears the APCu cache',
        'apcu_dec' => 'Decrease a stored number',
        'apcu_delete' => 'Removes a stored vaiable from the cache',
        'apcu_enabled' => 'Whether APCu is usable in the current environment',
        'apcu_entry' => 'Atomically fetch or generate a cache entry',
        'apcu_exists' => 'Checks if entry exists',
        'apcu_fetch' => 'Fetch a stord variable from the cache',
        'apcu_inc' => 'Increase a stored number',
        'apcu_key_info' => 'Get detrailed information aboutr the cache key',
        'apcu_sma_info' => 'Retrives APCu Shard Memory Allocation infomation',
        'apcu_store' => 'Cache a variable in the data store',
        'AppendIterator::append' => 'Appends an iterator',
        'AppendIterator::current' => 'Gts the current value',
        'AppendIterator::getArrayItrator' => 'Gets the ArrayIterator',
        'AppendIterator::getInnerIterator' => 'Gets th inner iteraor',
        'AppendIterator::getIteratorIndex' =>  'Gets an index of iterators',
        'AppendIterator::key' => 'Gets the current key',
        'AppendIterator::next' => 'Moves to the next element',
        'AppendIterator::rewind' => 'Rewinds the Iterator',
        'AppendIterator::valid' => 'Checks validity of the current element',
        'AppendIterator::__construct' => 'Constructs an AppendIterator',
        'array' => 'Crate an array',
        'ArrayAccess::offsetExists' => 'Whether an offset exists',
        'ArrayAccess::offsetGet' => 'Offset to retrieve',
        'ArrayAccess::offsetSet' => 'Assign a value to the spcifid offset',
        'ArrayAccess::offsetUnset' => 'Unset an offset',
        'ArrayIterator::append' => 'Append an element',
        'ArrayIterator::count' => 'Sort entries by values',
        'ArrayIterator::asort' => 'Count elements',
        'ArrayIterator::current' => 'Return current array entry',
        'ArrayIterator::getArrayCopy' => 'getFlags',
        'ArrayIterator::getFlags' => 'Get behavior flags',
        'ArrayIterator::key' => 'Return current array key',
        'ArrayIterator::ksort' => 'Sort entries by keys',
        'ArrayIterator::natcasesort' => 'Sort entries naturally, case insensitive',
        'ArrayIterator::natsort' => 'sort entries naturally',
        'ArrayIterator::next' => 'Move to next entry',
        'ArrayIterator::offestExists' => 'Check if offset exists',
        'ArrayIterator::offsetGet' => 'Get value for an offset',
        'ArrayIteraror::offsetSet' => 'Set value for an offset',
        'ArrayIterator::offstUnset' => 'Unset value for an offset',
        'ArrayIterator::rewind' => 'Rewind array bsack to the start',
        'ArrayIterator::seek' => 'Seek to position',
        'ArrayIterator::serialize' => 'Serialize',
        'ArrayIterator::setFlags' => 'Set behaviour flags',
        'ArrayIterator::uasort' => 'Sort with a user-defined comparisn functin and main tain index association',
        'ArrayIterator::uksort' => 'Sort by keys using a user-defined comparison function',
        'ArrayIterator::unserialize' =>  'Unsriablize',
        'ArrayIterator::valid' => 'Check whether array contains more entries',
        'ArrayIterator::__construct' =>'Construct an ArrayIterator',
        'ArrayObject::append' => 'Appends the value',
        'ArrayObject::asort' => 'Sort the entries by value',
        'ArrayObject::count' => 'Get the number of public properties in the ArrayObject',
        'ArrayObject::exchangeArray' => 'Exchange the array for another one',
        'ArrayObject::getArrayCopy' => 'Creates a copu oft the ArrayObject',
        'ArrayObject::getFlags' => 'Gets the behavior flags',
        'ArrayObject::getIterator' => 'Create a new iterator form an ArrayObject instance',
        'ArrayObject::getIteratorClass' => 'Gets the iterator clasname for the ArrayObject',
        'ArrayObject::ksort' => 'Sort the entries by key',
        'ArrayObject::natcassort' => 'Sort an array using a case insensitive "natural order" algorithm',
        'ArrayObject::natsort' => 'Sort entries using a "natural order" algorithm',
        'ArrayObject::offsetExists' => 'Returns whether the rquesterd index exists',
        'ArrayObject::offsetGet' => 'Returns the value at the specified index',
        'ArrayObject::offsetSet' => 'Sets the value at the specified index to newval',
        'ArrayObject::offsetUnset' => 'Unsets th value at the specified index',
        'ArrayObject::serialize' => 'Serialize an ArrayObject',
        'ArrayObject::setFlags' => 'Sets the behavior flags',
        'ArrayObject::setIteratorClass' => 'Set the iterator classname for the ArrayObject',
        'ArrayObject::uasort' => 'Sort the entries with a user-defined comparison function and maintain key associatin',
        'ArrayObject::uksort' => 'Sort the entries by keys using a user-defined comparison function',
        'ArrayObject::unserialize' => 'Unserialize an ArrayObject',
        'ArrayObject::__construct' => 'Construct a new array object',
        'array_change_key_case' => 'Changes the case of all keys i nan array',
        'array_chunk' => 'Split an array into chunks',
        'array_column' => 'Return the values from a single cloumn in the input array',
        'array_combine' => 'Creates an array by using one array for keys and another for tis values',
        'array_count_values' => 'Count all the values of an array',
        'array_diff' => 'Computes the difference of arrays',
        'array_diff_assoc' => 'Computes the difference of arrays with additional index check',
        'array_diff_key' => 'Computes the difference of arrays using keys for comparison',
        'array_diff_uassoc' => 'Computes the difference of arrays with additional index check which is performed by a user supplied callback function',
        'array_diff_ukey' => 'Computes difference of arrays usinf a callback function on the keys for comparison',
        'array_fill' => 'Fill an array with values',
        'array_fill_keys ' => 'Fill an array with vlaues, specifying keys',
        'array_filter' => 'Filters elements of an array using a callback function',
        'array_flip' => 'Exchanges all keys with their associated values in an array',
        'array_intersect' => 'Computes the intersection of arrays',
        'array_intersect_assoc' => 'Computes the intersection of arrays with addityional index check',
        'array_ineersect_key' => 'Computes the intersectin of arrays using keys for comparison',
        'array_intersect_uassoc' => 'Computes the intersection of arrays with additional index check, compares indexes by a callbvack function',
        'array_intersect_ukey' => 'Computes the intersection of arrays using a callback function on the keys for comparison',
        'array_is_list' => 'Check whether a given array is a list',
        'array_keys' => 'Return all the keys or a subset of the keys of an array',
        'array_key_exists' => 'Checks if the given key or index exists in the array',
        'array_key_first' => 'Gets the first key of an array',
        'array_key_last' => 'Gets the last key of an array',
        'array_map' => 'Applies the callback to the elements of the give arrays',
        'array_merge' => 'Merge one or more arrays',
        'array_merge_recursive' => 'Merge one or more arrays recursively',
        'array_multisort' => 'Sort multiple or multi-dimensional arrays',
        'array_pad' => 'Pad array to the specified length with a value',
        'array_pop' => 'Pop the element off the end of array',
        'array_product' => 'Calculate the product of values in an array',
        'array_push' => 'Push on or more elements onto the end of array',
        'array_rand' => 'Pick one or more random keys out of an array',
        'array_reduce' => 'Iteratively reduce the array to a single value using a callback function',
        'array_replace' => 'Replace elements from passed arays into the first array',
        'array_replace_recursive' => 'Replaces elements from passed arrays into the first array recursively',
        'array_reverse' => 'Return an aray withv elements in reverse order',
        'array_search' => 'Searches the array for a given valkue and returns the vfirst corrresponding key if successful',
        'array_shift' => 'Shift an elemnt off the beginning of array',
        'array_slice' => 'Extract a slice of the array',
        'array_splice' => 'Remove a portion of the array and replace it with something else',
        'array_sum' => 'Calculate the sum of values in an array',
        'array_udiff' => 'Computes the difference of arrays by using a callback function for data comparison',
        'array_udiff_assoc' => 'Computes the difference of arrays with additional index check, compares data by a callback funcrtion',
        'array_udiff_uassoc' => 'Computes the difference of arrays with additional index check, compares datra and ndexes by callvback function',
        'array_uintersect' => 'Computes the intersection of arrays, compares date by a callbvack function',
        'array_uintersect_assoc' => 'Computes the of arays witrh adsditinal index check, comopares data by a callback function',
        'array_uintersect_uassoc' => 'Computes the intersection of arrays with additional index check, compares data and indexed by separate callback functions',
        'array_unique' => 'Removes duplicate values from an array',
        'array_unshift' => 'Prepend one or more elements to the beginning of an array',
        'array_values' => 'Return all the values of an array',
        'array_walk' => 'Apply a user supplied function to evry membr of an array',
        'array_walk_revursive' => 'Apply a user function recursively to every member of an array',
        'arsort' => 'Sort an array in descending order and maintain index association',
        'asin' => 'Arc sine',
        'asinh' => 'Inverse hyperbolic sine',
        'asort' => 'Sort an array in ascending order and maintain index association',
        'assert' => 'Checks if assertion is false',
        'assert_options' => 'Set/get the various assert flags',
        'atan' => 'Arc tangent',
        'atan2' => 'Arc tangent of two variables',
        'atanh' => 'Inverse hyperbolic tangent',
    );

    public $b = array(
        'BackedEnum::from' => 'Maps a scalar to an enum instance',
        'BackedEnum::tryFrom' => 'Maps a scalar to an enum instance or null',
        'base64_decode' => 'Decodes data encoded with MIME base64',
        'base64_encode' => 'Encodes data with MIME base64',
        'basename' => 'Returns trailing name component of path',
        'BaseResult::getWatnings' => 'Fetch warning cout from last operation',
        'BaseResult::getWarningsCount' => 'Fetch warning count from last operation',
        'base_convert' => 'Convert a number between arbitrary',
        'bcadd' => 'Add two arbitrary precision numbers',
        'bccomp' => 'Compare two arbitrary precision numbers',
        'bcdiv' => 'Divide two arbitrary precision numbers',
        'bcmod' => 'Get modulus of an arbitrary precision number',
        'bcmul' => 'Multiplu two arbitrary precision numbers',
        'bcpow' => 'Raise an arbitrary precision number to another',
        'bcpowmod' => 'Raise an arbitrary prcision number to anther, reduced by a specified modulus',
        'bcscale' => 'Set or get default scale parameter for all bc math functions',
        'bcsqrt' => 'Get the square root of an arbitrary precision number',
        'bcsub' => 'Subtract one arbitrary precision number from another',
        'bin2hex' => 'Convert binary data into hxadecimal representain',
        'bindec' => 'Binary to decimal',
        'bindtextdomain' => 'Sets or gets the path for a domain',
        'bind_textdomain_codeset' => 'Specify or get the character ending in which the messags from the DOMAIN message catalgo will be returned',
        'boolval' => 'Get the boolean value of a variable',
        'bzclose' => 'Close a bzip2 file',
        'bzcompress' => 'Compress a string into bzip2 encoded data',
        'bzdecompress' => 'Decompresses bzip2 encoded data',
        'bzerrno' => 'Returns a bzip2 error number',
        'bzerror' => 'Returns the bzip2 error number and error string in an array',
        'bzerrstr' => 'Returns a bzip2 error string',
        'bzflush' => 'Do nothing',
        'bzopen' => 'Opens a bzip2 compressed file',
        'bzread' => 'Binary safe bzip2 file read',
        'bzwrite' => 'Binary safe bzip2 file write',
    );

    public $c = array(
        'CachingIterator::count' => 'The number of elements in the itrator',
        'CachingIterator::current' => 'Return the current element',
        'CachingIterator::getCache' => 'Retrieve the contents of the cache',
        'CachingIterator::getFlags' => 'Get flags used',
        'CachingIterator::getInnerIterator' => 'Returns the inner iterator',
        'CachingIterator::hasNext' => 'Check whether the  inner iterator has a valid next element',
        'CachingIterator::key' => 'Return the key for the current element',
        'CachingIterator::next' => 'Move the iterator forward',
        'CachingIterator::offsetExists' => 'The offsetExists purpose',
        'CachingIterator::offsetGet' => 'The offstGet purpose',
        'CachingIterator::offsetSet' => 'The offsetSet purpose',
        'CachingIterator::offsetUnset' => 'The offsetUnset purpose',
        'CachingIterator::rewind' => 'Rewind the iterator',
        'CachingIterator::setFlags' => 'The setFlags purpose',
        'CachingIterator::valid' => 'Check whether the current element is valid',
        'CachingIterator::__construct' => 'Construct a new CachingIterator object for the iterator',
        'CachingIterator::__toString' => 'Return the string representation of the current element',
        'CallbackFilterIterator::accept' => 'Calls the callback with the current value, the current key and the inner iterator as arguments',
        'CallbackFilterIterator::__construct' => 'Create a filtered iterator from another iterator',
        'call_user_func' => 'Call the callback given by the first parameter',
        'call_user_func_array' => 'Call a callback with an array of parameters',
        'cal_days_in_month' => 'Return the numbr of days in a month for a given year and calendar',
        'cal_from_jd' => 'Converts from Julian Day Count to a supported calendar',
        'cal_info' => 'Returns information about a particular calendar',
        'call_to_jd' => 'Converts from a supported calendar to Julian day Count',
        'ceil' => 'Round fractions up',
        'chdir' => 'Change directory',
        'checkdate' => 'Validate a Grgorian date',
        'checkdnsrr' => 'Check DNS records corresponding to a given Internet host name or IP address',
        'chgrp' => 'Changes file group',
        'chmod' => 'Changes file mode',
        'chop' => 'Alias of rtrim',
        'chown' => 'Changes file owner',
        'chr' => 'Generate a single-byt string from a number',
        'chroot' => 'Change the root directory',
        'chunk_split' => 'Split a string into smaller chunks',
        'class_alias' => 'Creates an alias for a class',
        'class_exists' => 'Checks if the calss has been defined',
        'class_implements' => 'Return the interfaces which are implemented by the given class or interface',
        'class_parents' => 'Return the parent calsses of the given class',
        'class_uses' => 'Return the traits used by the given class',
        'clearstatcache' => 'Clears file status cache',
        'Client::getClient' => 'Get client seesion',
        'Client::__construct' => 'Client constructor',
        'cli_get_process_title' => 'Returns the current process title',
        'cli_set_process_title' => 'Sets the process title',
        'closedir' => 'Close directory handle',
        'closelog' => 'Close connection to system logger',
        'Closure::bind' => 'Duplicates a closure with a specific bound object and class scope',
        'Closure::bindTo' => 'Duplicates the closure with a new bound objexct and class scope',
        'Closure::call' => 'Binds and calls the closure',
        'Closure::fromCallable' => 'Converts a callable into a closure',
        'Closure::__construct' => 'Constructor that disallows instantiation',
        'Collator::asort' => 'Sort array maintaining index association',
        'Collator::compare' => 'Compare two Unicode strings',
        'Collator::create' => 'Create a collator',
        'Collator::getAttribute' => 'Get collation attribute value',
        'Collator::getErrorCode' => "Get collator's last error code",
        'Collator::getErrorMessage' => "Get text for collator's laste error code",
        'Collator::getLocale' => 'Get the locale name of the collator',
        'Collator::getSortKey' => 'Get sorting key for a string',
        'Collator::getStrength' => 'Get current collation strength',
        'Collator::getAttribute' => 'Set collation attribute',
        'Collator::setStrength' => 'Set collation strength',
        'Collator::sort' => 'Sort array using specified collator',
        'Collator::sortWithSortKeys' => 'Sort array using specified collator and sort keys',
        'Collator::__construct' => 'Create a collator',
        'Collectable::isGarbage' => 'Determine whether an object has been marked as garbage',
        'Collection::add' => 'Add collection document',
        'Collection::addOrReplaceOne' => 'Add or replace collection document',
        'Collection::count' => 'Get document count',
        'Collection::createIndex' => 'Create collection index',
        'Collection::dropIndex' => 'Drop collection index',
        'Collection::existsInDatabase' => 'Check if collection exists fin database',
        'Collection::find' => 'Search for document',
        'Collection::getName' => 'Get collection name',
        'Collection::getOne' => 'Get one document',
        'Collection::getSchema' => 'Get schema object',
        'Collection::getSession' => 'Get session object',
        'Collection::modify' => 'Modify collection documents',
        'Collection::remove' => 'Remove collection documents',
        'Collection::removeOne' => 'Remove collection document',
        'Collection::replaceOne' => 'Rplace one collectin document',
        'Collection::__construct' => 'Collention constructor',
        'CollectionAdd::execute' => 'Execute the statement',
        'CollectionAdd::__construct' => 'CollectionAdd constructor',
        'CollectionFind::bind' => 'Bind value to query placeholder',
        'CollectionFind::execute' => 'Execute the statement',
        'CollectionFind::fields' => 'Set document field filter',
        'CollectionFind::groupBy' => 'Set grouping criteria',
        'CollectionFind::having' => 'Set condition for aggregate functions',
        'CollectionFind::limit' => 'Limit number of returned documents',
        'CollectionFind::lockExclusive' => 'Execute operation with EXCLUSIVE LOCK',
        'CollectionFind::locakShared' => 'Execute operation with SHARED LOCK',
        'CollectionFind::offset' => 'Skip given number of elements to be returned',
        'CollectionFind::sort' => 'Set the sorting criteria',
        'CollectionFind::__construct' => 'CollectionFind constrcutor',
        'CollectionModify::arrayAppend' => 'Append element to an array field',
        'CollectionModify::arrayInsert' => 'Insert element into an array field',
        'CollectionModify::bind' => 'Bind value to query placeholder',
        'CollectionModify::execute' => 'Execute modify operation',
        'CollectionModify::limit' => 'Limit number of modified documents',
        'CollectionModidy::patch' => 'Patch document',
        'CollectionModify::repalce' => 'Replace document field',
        'CollectionModify::set' => 'Set document attribute',
        'CollectionModify::skip' => 'Skip elements',
        'CollectionModify::sort' => 'Set the sorting criteria',
        'CollectionModify::unset' => 'Unset the value of document fields',
        'CollectionModify::__constrcut' => 'CollectionModify constructor',
        'CollectionRemove::bind' => 'Bind value to placeholder',
        'CollectionRemove::execute' => 'Execute remore operation',
        'CollectionRemove::limit' => 'Limit number of documents to remove',
        'CollectionRemove::sort' => 'Set the sorting criteria',
        'CollectionRemove::__construct' => 'CollectionRemove constructor',
        'ColumnResult::getCharacterSetName' => 'Get character set',
        'ColumnResult::getCollationName' => 'Get collation name',
        'ColumnResult::getColumnLabel' => 'Get column label',
        'ColumnResult::getColumnName' => 'Get column name',
        'ColumnResult::getFractionalDigits' => 'Get fractional digit length',
        'ColumnResult::getLength' => 'Get column field length',
        'ColumnResult::getSchemaName' => 'Get table label',
        'ColumnResult::getTableLabel' => 'Get table label',
        'ColumnResult::getTableName' => 'Get table name',
        'ColumnResult::getType' => 'Get column type',
        'ColumnResult::isNumberSigned' => 'Check if signed type',
        'ColumnResult::isPadded' => 'Check if padded',
        'ColumnResult::__constrcut' => 'ColumnResult constructor',
        'com::__construct' => 'com class constr',
        'CommonMark\CQL::__construct' => 'CQL Construction',
        'CommonMark\CQL::__invoke' => 'CQL Execution',
        'CommonMark\Interfaces\IVistable::accpet' => 'Visitation',
        'CommonMark\Interfaces\IVistor::enter' => 'Visitation',
        'CommonMark\Interfaces\IVistor::leave' => 'Visitation',
        'CommonMark\Node::accept' => 'Visitation',
        'CommonMark\Node::appendChild' => 'AST Manipulation',
        'CommonMark\Node::insertAfter' => 'AST Manipulation',
        'CommonMark\Node::insertBefore' => 'AST Manipulation',
        'CommonMark\Node::prependChild' => 'AST Manipulation',
        'CommonMark\Node::replace' => 'AST Manipulation',
        'CommonMark\Node::unlink' => 'AST Manipulation',
        'CommonMark\Node\BulletList::__construct' => 'BulletList Construction',
        'CommonMark\Node\CodeBlock::__construct' => 'CodeBlock Construction',
        'CommonMark\Node\Heading::__construct' => 'Heading Construction',
        'CommonMark\Node\Image::__construct' => 'Image Construction',
        'CommonMark\Node\Link::__construct' => 'Link Construction',
        'CommonMark\Node\OrderedList::__construct' => 'OrderedList Construction',
        'CommonMark\Node\Text::__construct' => 'Text Construction',
        'CommonMark\Parse' => 'Parsing',
        'CommonMark\Parser::finish' => 'Parsing',
        'CommonMark\Parser::parse' => 'Parsing',
        'CommonMark\Parser::__construct' => 'Parsing',
        'CommonMark\Render' => 'Rendering',
        'CommonMark\Render\HTML' => 'Rendering',
        'CommonMark\Render\Latex' => 'Rendering',
        'CommonMark\Render\Man' => 'Rendering',
        'CommonMark\Render\XML' => 'Rendering',
        'compact -Crate array containing variables and their values',
        'COMPersisHelper::GetCurFileName' => 'Get current filename',
        'COMPersisHelper::GetMaxStreamSize' => 'Get maximum stream size',
        'COMPersisHelper::InitNew' => 'Initialize object to default state',
        'COMPersisHelper::LoadFromFile' => 'Load object from file',
        'COMPersisHelper::LoadFromStream' => 'Load object from stream',
        'COMPersisHelper::SaveToFile' => 'Save object to file',
        'COMPersisHelper::SaveToStream' => 'Save object to stream',
        'COMPersisHelper::__construct' => 'Construct a COMPersisHelper object',
        'Componere\Abstract\Definition::addInterface' => 'Add Interface',
        'Componere\Abstract\Definition::addMethod' => 'Add Method',
        'Componere\Abstract\Definition::addTrait' => 'Add Trait',
        'Componere\Abstract\Definition::getReflector' => 'Reflection',
        'Componere\cast' => 'Casting',
        'Componere\cast_by_ref' => 'Casting',
        'Componere\Definition::addConstant' => 'Add Constant',
        'Componere\Definition::addProperty' => 'Add Property',
        'Componere\Definition::getClosure' => 'Get Closure',
        'Componere\Definition::getClosures' => 'Get Closures',
        'Componere\Definition::isRegistered' => 'State Detection',
        'Componere\Definition::register' => 'Registration',
        'Componere\Definition::__construct' => 'Definition Construction',
        'Componere\Method::getReflector' => 'Relection',
        'Componere\Method::setPrivate' => 'Accessibility Modification',
        'Componere\Method::setProtected' => 'Accessibility Modification',
        'Componere\Method::setStatic' => 'Accessibility Modificatiion',
        'Componere\Method::__constrcut' => 'Method Construction',
        'Componere\Patch::apply' => 'Application',
        'Componere\Patch::derive' => 'Patch Derivation',
        'Componere\Patch::getClosure' => 'Get Closure',
        'Componere\Patch::getClosures' => 'Get Closures',
        'Componere\Patch::isApplied' => 'State Detection',
        'Componere\Patch::revert' => 'Reversal',
        'Componere\Patch::__construct' => 'Patch Construction',
        'Componere\Value::hasDefault' => 'Value Interaction',
        'Componere\Value::isPrivate' => 'Accessibility Detection',
        'Componere\Value::isProtected' => 'Accessibility Detection',
        'Componere\Value::isStatic' => 'Accessibility Detection',
        'Componere\Value::setPrivate' => 'Accessibility Modification',
        'Componere\Value::setPrortected' => 'Accessibility Modification',
        'Componere\Value::setStatic' => 'Accessibility Modification',
        'Componere\Value::__construct' => 'Value Construction',
        'com_create_guid' => 'Generate a globally unique identifier (GUID)',
        'com_event_sink' => 'Connect events from a COM object to a PHP object',
        'com_get_active_object' => 'Returns a handle to an already runing instance of a COM object',
        'com_load_typelib' => 'Loads a Typelib',
        'com_message_pump' => 'Process COM messages, sleeping for up to timeoutms milliseconds',
        'com_print_typeinfo' => 'Print out a PHP class definition for a dispathcable interface',
        'connection_aborted' => 'Check whether client disconnected',
        'connection_stauts' => 'Returns connection staus bitfield',
        'constant' => 'Returns the valus of a constant',
        'Context parameters' => 'Context parameter listing',
        'convert_cyr_string' => 'Convert from one Cyrillic character set to another',
        'convert_uudecode' => 'Decode a uuencoded string',
        'convert_uuencode' => 'Uuencode a string',
        'copy' => 'Copies file',
        'cos' => 'Cosine',
        'cosh' => 'Hyperbolic cosine',
        'count' => 'Counts all elements in an array or in a Countable object',
        'Countable::count' => 'Count elements of an object',
        'count_charts' => 'Return information about characters used in a string',
        'crc32' => 'Calculates the crc32 polynomial of a string',
        'create_function' => 'Create an anonymous (lambda-style) function',
        'CrudOperationBindable::bind' => 'Bind value to placeholder',
        'CrudOperationLimitable::limit' => 'Set result limit',
        'CrudOperationSkippable::skip' => 'Number of operations to skip',
        'CrudOperationSortable::sort' => 'Sort results',
        'crypt' => 'One-way string hashing',
        'ctype_alnum' => 'Check for alphanumeric character(s)',
        'ctype_alpha' => 'Check for alphabetic character(s)',
        'ctype_cntrl' => 'Check for control character(s)',
        'ctype_digit' => 'Check for numeric character(s)',
        'ctype_graph' => 'Check for any printable character(s) excepot space',
        'ctype_lower' => 'Check for lowercase character(s)',
        'ctype_print' => 'Check for printable character(s)',
        'ctype_punct' => 'Check for any printable character which is not whitespace or an alphanu,eric chartacter',
        'ctype_space' => 'Check for whitespace character(s)',
        'ctype_upper' => 'Check for uppercase character(s)',
        'ctype_xdigit' => 'Check for charactor(s) representing a hexadecimal digit',
        'cubrid_affected_rows' => 'Return the number of rows affected by the last SQL statement',
        'cubrid_bind' => 'Bind variables to a prepared statement as parameters',
        'cubrid_client_encoding' => 'Return the current CUBRID connection charset',
        'cubrid_close' => 'Close CUBRID connection',
        'cubrid_close_prepare' => 'Close the request handle',
        'cubrid_close_request' => 'Close the request handle',
        'cubrid_column_names' => 'Get the column names in result',
        'cubrid_column_types -Get column types in result',
        'cubrid_col_get' => 'Get contents of collection type column using OID',
        'cubrid_col_size' => 'Get the numb er of elements in collection typoe column using OID',
        'cubrid_commit' => 'Commit a transaction',
        'cubrid_connect' => 'Open a connection to a CUBRID Server',
        'cubrid_connect_with_url' => 'Establish the environment for connnecting to CUBRID server',
        'cubrid_current_oid' => 'Get OID of the current cursor location',
        'cubrid_data_seek' => 'Move the internal row pointer of the CUBRID result',
        'cubrid_db_name' => 'Get db name from results of cubrid_list_db',
        'cubrid_disconnect' => 'Close a database connection',
        'cubrid_drop' => 'Delete an instance using OID',
        'cubrid_errno' => 'Return the numeerical value of the error message form prvious CUBRID operation',
        'cubrid_error' => 'Get the error message',
        'cubrid_error_code' => 'Get error code for the most recent function call',
        'cubrid_error_code_facility' => 'Get the facility code of error',
        'cubrid_error_msg' => 'Get last error message for the most rcent function call',
        'cubrid_execute' => 'Execute a prepared SQL statement',
        'cubrid_fetch' => 'Fetch the next row from a result set',
        'cubrid_fetch_array' => 'Fetch a result row as an associative array, a numeric array, or both',
        'cubrid_fetch_assoc' => 'Return the associativev array that corresponds to th fetched row',
        'cubrid_fetch_field' => 'Get column information from a rsult and rturn as an object',
        'cubrid_fetch_lengths' => 'Return an array with the lengths of the values of each field from the curent row',
        'cubrid_fetch_object' => 'Fetch the next row and return it as an object',
        'cubrid_fetch_row' => 'Return a numerical array with the values of the current row',
        'cubrid_fetch_flags' => 'Return a string with the flags of the given field offset',
        'cubrid_field_len' => 'Get the maximum length of the specified field',
        'cubrid_field_name' => 'Return the name of the specified field index',
        'cubrid_field_seek' => 'Move the result set cursor to th specifid field',
        'cubrid_field_table' => 'Return the name of the table of the specified field',
        'cubrid_field_type' => 'Return the type of the column corresponding to the five field offset',
        'cubrid_free_result' => 'Free the memory occupied by the result data',
        'cubrid_get' => 'Get a column using OID',
        'cubrid_get_autocommit' => 'Get auto-commit mode of the connection',
        'cubrid_get_charset' => 'Return the current CUBRID connection charset',
        'cubrid_get_class_name' => 'Get the class name using OID',
        'cubrid_get_client_info' => 'Return the client library version',
        'cubrid_get_db_parameter' => 'Returns the CUBRID server version',
        'cubrid_get_query_timeout' => 'Get the query tiemout vvalue of the request',
        'cubrid_get_server_info' => 'Return the vCUBRID server version',
        'cubrid_insert_id' => 'Return the ID generated for the last updated AUTO_INCREMENT column',
        'cubrid_is_instance' => 'Check whether the instance pointed by OID exists',
        'cubrid_list_dbs' => 'Return an array with the list of all existing CUBRID databases',
        'cubrid_load_from_glo' => 'Read data from a GLO instance and save it in a file',
        'cubrid_lob2_bind' => 'Bind a lob object or a string as a lob object to a prepard statement as parameters',
        'cubrid_lob2_close' => 'Close LOB object',
        'cubrid_lob2_export' => 'Export the lob object to a file',
        'cubrid_lob2_import' => 'Import BLOB/CLOB data from a file',
        'cubrid_lob2_new' => 'Create a lob object',
        'cubrid_lob2_read' => 'Read from BLOB/CLOB data',
        'cubrid_lob2_seek' => 'Move the cursor of a lob object',
        'cubrid_lob2_seek64' => 'Move the cursor of a lob object',
        'cubrid_lob2_size' => "Get a lob object's size",
        'cubrid_lob2_size64' => "Get a lob object's size",
        'cubrid_lob2_tell' => 'Tell the cursor position of the LOB object',
        'cubrid_lob2_tell64' => 'Tell the cursor position of the LOB object',
        'cubrid_lob2_write' => 'Write to a lob object',
        'cubrid_lob_close' => 'Close BLOB/CLOB data',
        'cubrid_lob_export' => 'Export BLOB/CLOB data to file',
        'cubrid_lob_get' => 'Get BLOB/CLOB data',
        'cubrid_lob_send' => 'Read BLOB/CLOB data and send straight to browser',
        'cubrid_lob_size' => 'Get BLOB/CLOB data size',
        'cubrid_lock_read' => 'Set a read lock on the given OID',
        'cubrid_lock_write' => 'Set a write lock on the given OID',
        'cubrid_move_cursor' => 'Move the cursor in the result',
        'cubrid_new_glo' => 'Create a glo instance',
        'cubrid_next_result' => 'Get result of next query when exectuing multiple SQL statements',
        'cubrid_num_cols' => 'Return the number of columns in the result set',
        'cubrid_num_fields' => 'Return number of rows in the result set',
        'cubrid_num_rows' => 'Get the number of rows in the result set',
        'cubrid_pconnect' => 'Open a persistent connection to CUBRID server',
        'cubrid_pconnect_with_url' => 'Open a persistent connection to CUBRID server',
        'cubrid_ping' => 'Ping a server connection or or reconnect if there is no connection',
        'cubrid_prepare' => 'Prepare a SQL statement for execution',
        'cubrid_put' => 'Update a column using OID',
        'cubrid_query' => 'Send a CUBRID query',
        'cubrid_real_escape_string' => 'Escape special characters in a string for use in an SQL statement',
        'cubrid_result' => 'Return the value of a specific field in a specific row',
        'cubrid_rollback' => 'Roll back a transaction',
        'cubrid_save_to_go' => 'Save requested file in a GLO instance',
        'cubrid_schema' => 'Get the requested schema information',
        'cubrid_send_glo' => 'Read data from glo and send it to std ouput',
        'cubrid_seq_drop' => 'Delete an element from sequence typoe clumn using OID',
        'cubrid_seq_insert' => 'Insert an element to a sequence type column using OID',
        'cubrid_seq_put' => 'Update the element value of sequence type column using OID',
        'cubrid_set_add' => 'Insert a single element to set type column using OID',
        'cubrid_set_autocommit' => 'Set autocommit mode of the connection',
        'cubrid_set_db_parameter' => 'Sets the CUBRID database parameters',
        'cubrid_set_drop' => 'Delete an element from set type column using OID',
        'cubrid_set_query_timeout' => 'Set the timeout time of query execution',
        'cubrid_unbuffered_query' => 'Perform a query without fetching the rsults into memory',
        'cubrid_version' => "Get the CUBRID PHP module's version",
        'CURL context options' => 'CURL context option listing',
        'CURLFile::getFilename' => 'Get file name',
        'CURLFile::getMimeType' => 'Get MIME type',
        'CURLFile::getPostFilename' => 'Get file name for POST',
        'CURLFile::setMimeType' => 'Set MIME type',
        'CURLFile::setPostFilename' => 'Set file name for POST',
        'CURLFile::__construct' => 'Create a CURLFile object',
        'CURLStringFile::__construct' => 'Create a CURLStringFile object',
        'curl_close' => 'Close a cURL session',
        'curl_copy_handle' => 'Copy a cURL handle alongv with all of its preferences',
        'curl_errno' => 'Return the last error number',
        'curl_error' => 'Return a string containing the last error for the current session',
        'curl_escape' => 'URL encodes the given string',
        'curl_exec' => 'Perform a cURL session',
        'curl_getinfo' => 'Get information regarding a specific transfer',
        'curl_init' => 'Initialize acURL session',
        'curl_multi_add_handle' => 'Add a normal cURL handle to a cURL multi handle',
        'curl_multi_close' => 'Close a set of cURL handles',
        'curl_multi_errno' => 'Return the last multi curl error number',
        'curl_multi_exec' => 'Run the sub-connections of the current cURL handle',
        'curl_multi_getcontent' => 'Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set',
        'curl_multi_info_read' => 'Get information about the current transfers',
        'curl_multi_init' => 'Returns a new vcURL multi handle',
        'curl_multi_remove_handle' => 'Remove a multi handle from a set of cURL handles',
        'curl_multi_select' => 'Wait for acrtivity on any curl_nulti connection',
        'curl_multi_setopt' => 'Set an option for the cURL multi handle',
        'curl_multi_strerror' => 'Return string describing error code',
        'curl_pause' => 'Pause and unpause a connection',
        'curl_reset' => 'Reset all options of a libcurl session handle',
        'curl_setopt' => 'Set an option for a cURL transfer',
        'curl_setopt_array' => 'Set multiple options for a cURL transfer',
        'curl_share_close' => 'Close a cURL sharev handle',
        'curl_share_errno' => 'Return the last share curl error number',
        'curl_share_init' => 'Initialize a cURL share handle',
        'curl_share_setopt' => 'Set an option for a cURL share handle',
        'curl_share_strerror' => 'Return string describing the given error code',
        'curl_strerror' => 'Return string describing the given error code',
        'curl_unescape' => 'Decodes the given URL encoded string',
        'curl_version' => 'Gets cURL version information',
        'current' => 'Return the currnt element in an array',
    );

    public $d = array(
        'data://' => 'Data (RFC 2397)',
        'DatabaseObject::existsInDatabase' => 'Check if object exits in database',
        'DatabaseObject::getName' => 'Get object name',
        'DatabaseObject::getSession' => 'Get session name',
        'date' => 'Format a local time/date',
        'DateInterval::createFromDateString' => 'Sets up a DateInterval from the relative parts of the string',
        'DateInterval::format' => 'Formats the interval',
        'DateInterval::__construct' => 'Creates a new DateInterval object',
        'DatePeriod::getDateInterval' => 'Gets the interval',
        'DatePeriod::getEndDate' => 'Gets the end date',
        'DatePeriod::getRecurrences' => 'Gets the number of recurrences',
        'DatePeriod::getStartDate' => 'Gets the start date',
        'DatePeriod::__construct' => 'Creates a new DatePeriod object',
        'DateTime::add' => 'Adds an amount of days, months, years, hours, minutes and seconds to a DateTime object',
        'DateTime::createFromFormat' => 'Parses a time string according to a specified format',
        'DateTime::createFromImmutable' => 'Returns new DateTime object encapsulating the given DateTimeImmutable object',
        'DateTime::createFromInterface' => 'Returns new DateTime object encapsulating the given DateTimeInterface object',
        'DateTime::diff' => 'Returns th difference between two DateTime obejcts',
        'DateTime::format' => 'Returns date formatted accordingf to given format',
        'DateTime::getLastErrors' => 'Returns the warnings and errors',
        'DateTime::getOffset' => 'Returns the timezone offset',
        'DateTime::getTimestamp' => 'Gets the Unix timestamp',
        'DateTime::getTimezone' => 'Return time zone relative to given DateTime',
        'DateTime::modify' => 'Alters the timestamp',
        'DateTime::setDate' => 'Sets the date',
        'DateTime::setISODate' => 'Sets the ISO date',
        'DateTime::setTime' => 'Sets the time',
        'DateTime::setTimestamp' => 'Sets the date and time based on an Unix timestamp',
        'DateTime::setTimezone' => 'Sets the time zone for the DateTime object',
        'DateTime::sub' => 'Subtracts an amount of days, months, years, hours, minutes and seconds from a DateTime object',
        'DateTime::__construct' => 'Returns new DateTime object',
        'DateTime::__set_state' => 'The  __set_state handler',
        'DateTime::__wakeup' => 'The __wakeup handler',
        'DateTimeImmutable::add' => 'Adds an amount of days, months, years, hours, minutes and seconds',
        'DateTimeImmutable::createFromFormat' => 'Pares a time string accrding to a specified format',
        'DateTimeImmutable::createFromInterface' => 'Returns new DateTimeImmutable object encapsulatin the given DateTimeInterface object',
        'DateTimeImmutable::createFromMutable' => 'Returns new DateTimeImmutable object encapsulating the given DateTime object',
        'DateTimeImmutable::getLastErrors' => 'Returns the warnings and errors',
        'DateTimeImmutable::modify' => 'Creates a new object with modified timestamp',
        'DateTimeImmutable::setDate' => 'Sets the date',
        'DateTimeImmutable::setISODate' => 'Sets the ISO date',
        'DateTimeImmutable::setTime' => 'Sets the ISO date',
        'DateTimeImmutable::setTimestamp' => 'Sets the date and time based on a Unix timestamp',
        'DateTimeImmutable::setTimezone' => 'Sets the time zone',
        'DateTimeImmutable::sub' => 'Subtracts an amount of days, months, years, hours, minutes and seconds',
        'DateTimeImmutable::__construct' => 'Returns new DateTimeImmutable object',
        'DateTimeImmutable::__set_state' => 'The __set_state handler',
        'DateTimeZone::getLocation' => 'Returns location information for a timezone',
        'DateTimeZone::getName' => 'Returns the name of the timezone',
        'DateTimeZone::getOffset' => 'Returns the timezone offset from GMT',
        'DateTimeZone::getTransitions' => 'Returns all transitions for the timezone',
        'DateTimeZone::listAbbreviations' => 'Returns associativev array containing dst, offset and the timezone name',
        'DateTimeZone::listIdentifers' => 'Returns a numerically indexed array containing all defined timezone identifiers',
        'DateTimeZone::__construct' => 'Creates new DateTimeZone object',
        'date_add' => 'Alias of DateTime::add',
        'date_create' => 'Alias of DateTimeLL__construct',
        'date_create_from_format' => 'Alias of DateTime::createFromFormat',
        'date_create_immutable' => 'Alias of DateTimeImmutable::__construct',
        'date_create_immutable_from_format' => 'Alias of DateTimeImmutable::crateFromFormat',
        'date_date_set' => 'Alias of DateTime::setDate',
        'date_default_timezone_get' => 'Gets the default timezone used by all date/time functions in a script',
        'date_default_timezoneset' => 'Sets the default timezone used by all date/time functions in a script',
        'date_diff' => 'Alias of DateTime::diff',
        'date_format' => 'Alias of DatTime::format',
        'date_get_last_errors' => 'Alias of DateTime::getLastErrors',
        'date_interval_create_from_date_string' => 'Alias of DateInterval::createFromDateString',
        'date_interval_format' => 'Alias of DateInterval::format',
        'date_isodate_set' => 'Alias of DateTime::setISODate',
        'date_modify' => 'Alias of DateTime::modify',
        'date_offset_get' => 'Alias of DateTime::getOffset',
        'date_parse' => 'Returns associative array with detailed info about given date/time',
        'date_parse_from_format' => 'Get info about given date formatted according to the specified format',
        'date_sub' => 'Alias of DateTime::sub',
        'date_sunrise' => 'Returns time of sunrise for a given day and location',
        'date_sunset' => 'Returns time of sunset for a given day and location',
        'date_sun_info' => 'Returns an array with information about sunset/sunrise and twilight begin/end',
        'date_timestamp_get' => 'Alias of DateTime::getTimestamp',
        'date_timestamp_set' => 'Alias of DateTime::setTimestamp',
        'date_timezone_get' => 'Alias of DateTime::getTimezone',
        'date_timezone_set' => 'Alias of DateTime::setTimezone',
        'date_time_set' => 'Alias of DateTime::setTime',
    );
}
