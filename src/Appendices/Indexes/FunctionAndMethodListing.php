<?php

namespace Ext\Appendices\Indexes;

class FunctionAndMethodListing
{
    const VERSION = '22.3.27';

    public $a =  array(
        'abs' => 'Absolute value',
        'acos' => 'Arc cosine',
        'acosh' => 'Inverse hyperbolic cosine',
        'adddcslashes' => 'Quote string with slashes in a C style',
        'addslashes' => 'Quote string with slashes',
        'apache_child_teminate' => 'TTerminate apache proces afer this request',
        'apache_getenv' => 'Get an Apache subprocess_env variable',
        'apache_get_modules' => 'Get a list of loaded Apache modules',
        'apache_get_version' => 'Fetch Apache version',
        'apache_look_uri' => 'Perform a partial request for the specified URI and return all info about it',
        'apache_note' => 'Get and set apache request notes',
        'apache_request_headers' => 'Fetch all HTTP request headers',
        'apache_response_headers' => 'Fetch all HTTP respone headers',
        'apache_setenv' => 'Set an Apache subprocess_env variable',
        'APCUIterator::current' => 'Get current item',
        'APCUIterator::getTotalCount' => 'Get total count',
        'APCUIterator::getTotalHits' => 'Get total cache hits',
        'APCUIterator::getTotalSize' => 'Get total cache size',
        'APCUIterator::key' => 'Get iterator key',
        'APCUIterator::next' => 'Move pointer to next item',
        'APCUIterator::rewind' => 'Rewinds iterator',
        'APCUIterator::valid' => 'Checks if current position id valid',
        'APCUIterator::__construct' => 'Constructs an APCIterator object',
        'apcu_add' => 'Cache a new variable in the data store',
        'apcu_cache_info' => "Retrieves cached information from APCu's data store",
        'apcu_cas' => 'Updates an old value with va new value',
        'apcu_clear_cache' => 'Clears the APCu cache',
        'apcu_dec' => 'Decrease a stored number',
        'apcu_delete' => 'Removes a stored vaiable from the cache',
        'apcu_enabled' => 'Whether APCu is usable in the current environment',
        'apcu_entry' => 'Atomically fetch or generate a cache entry',
        'apcu_exists' => 'Checks if entry exists',
        'apcu_fetch' => 'Fetch a stord variable from the cache',
        'apcu_inc' => 'Increase a stored number',
        'apcu_key_info' => 'Get detrailed information aboutr the cache key',
        'apcu_sma_info' => 'Retrives APCu Shard Memory Allocation infomation',
        'apcu_store' => 'Cache a variable in the data store',
        'AppendIterator::append' => 'Appends an iterator',
        'AppendIterator::current' => 'Gts the current value',
        'AppendIterator::getArrayItrator' => 'Gets the ArrayIterator',
        'AppendIterator::getInnerIterator' => 'Gets th inner iteraor',
        'AppendIterator::getIteratorIndex' =>  'Gets an index of iterators',
        'AppendIterator::key' => 'Gets the current key',
        'AppendIterator::next' => 'Moves to the next element',
        'AppendIterator::rewind' => 'Rewinds the Iterator',
        'AppendIterator::valid' => 'Checks validity of the current element',
        'AppendIterator::__construct' => 'Constructs an AppendIterator',
        'array' => 'Crate an array',
        'ArrayAccess::offsetExists' => 'Whether an offset exists',
        'ArrayAccess::offsetGet' => 'Offset to retrieve',
        'ArrayAccess::offsetSet' => 'Assign a value to the spcifid offset',
        'ArrayAccess::offsetUnset' => 'Unset an offset',
        'ArrayIterator::append' => 'Append an element',
        'ArrayIterator::count' => 'Sort entries by values',
        'ArrayIterator::asort' => 'Count elements',
        'ArrayIterator::current' => 'Return current array entry',
        'ArrayIterator::getArrayCopy' => 'getFlags',
        'ArrayIterator::getFlags' => 'Get behavior flags',
        'ArrayIterator::key' => 'Return current array key',
        'ArrayIterator::ksort' => 'Sort entries by keys',
        'ArrayIterator::natcasesort' => 'Sort entries naturally, case insensitive',
        'ArrayIterator::natsort' => 'sort entries naturally',
        'ArrayIterator::next' => 'Move to next entry',
        'ArrayIterator::offestExists' => 'Check if offset exists',
        'ArrayIterator::offsetGet' => 'Get value for an offset',
        'ArrayIteraror::offsetSet' => 'Set value for an offset',
        'ArrayIterator::offstUnset' => 'Unset value for an offset',
        'ArrayIterator::rewind' => 'Rewind array bsack to the start',
        'ArrayIterator::seek' => 'Seek to position',
        'ArrayIterator::serialize' => 'Serialize',
        'ArrayIterator::setFlags' => 'Set behaviour flags',
        'ArrayIterator::uasort' => 'Sort with a user-defined comparisn functin and main tain index association',
        'ArrayIterator::uksort' => 'Sort by keys using a user-defined comparison function',
        'ArrayIterator::unserialize' =>  'Unsriablize',
        'ArrayIterator::valid' => 'Check whether array contains more entries',
        'ArrayIterator::__construct' =>'Construct an ArrayIterator',
        'ArrayObject::append' => 'Appends the value',
        'ArrayObject::asort' => 'Sort the entries by value',
        'ArrayObject::count' => 'Get the number of public properties in the ArrayObject',
        'ArrayObject::exchangeArray' => 'Exchange the array for another one',
        'ArrayObject::getArrayCopy' => 'Creates a copu oft the ArrayObject',
        'ArrayObject::getFlags' => 'Gets the behavior flags',
        'ArrayObject::getIterator' => 'Create a new iterator form an ArrayObject instance',
        'ArrayObject::getIteratorClass' => 'Gets the iterator clasname for the ArrayObject',
        'ArrayObject::ksort' => 'Sort the entries by key',
        'ArrayObject::natcassort' => 'Sort an array using a case insensitive "natural order" algorithm',
        'ArrayObject::natsort' => 'Sort entries using a "natural order" algorithm',
        'ArrayObject::offsetExists' => 'Returns whether the rquesterd index exists',
        'ArrayObject::offsetGet' => 'Returns the value at the specified index',
        'ArrayObject::offsetSet' => 'Sets the value at the specified index to newval',
        'ArrayObject::offsetUnset' => 'Unsets th value at the specified index',
        'ArrayObject::serialize' => 'Serialize an ArrayObject',
        'ArrayObject::setFlags' => 'Sets the behavior flags',
        'ArrayObject::setIteratorClass' => 'Set the iterator classname for the ArrayObject',
        'ArrayObject::uasort' => 'Sort the entries with a user-defined comparison function and maintain key associatin',
        'ArrayObject::uksort' => 'Sort the entries by keys using a user-defined comparison function',
        'ArrayObject::unserialize' => 'Unserialize an ArrayObject',
        'ArrayObject::__construct' => 'Construct a new array object',
        'array_change_key_case' => 'Changes the case of all keys i nan array',
        'array_chunk' => 'Split an array into chunks',
        'array_column' => 'Return the values from a single cloumn in the input array',
        'array_combine' => 'Creates an array by using one array for keys and another for tis values',
        'array_count_values' => 'Count all the values of an array',
        'array_diff' => 'Computes the difference of arrays',
        'array_diff_assoc' => 'Computes the difference of arrays with additional index check',
        'array_diff_key' => 'Computes the difference of arrays using keys for comparison',
        'array_diff_uassoc' => 'Computes the difference of arrays with additional index check which is performed by a user supplied callback function',
        'array_diff_ukey' => 'Computes difference of arrays usinf a callback function on the keys for comparison',
        'array_fill' => 'Fill an array with values',
        'array_fill_keys ' => 'Fill an array with vlaues, specifying keys',
        'array_filter' => 'Filters elements of an array using a callback function',
        'array_flip' => 'Exchanges all keys with their associated values in an array',
        'array_intersect' => 'Computes the intersection of arrays',
        'array_intersect_assoc' => 'Computes the intersection of arrays with addityional index check',
        'array_ineersect_key' => 'Computes the intersectin of arrays using keys for comparison',
        'array_intersect_uassoc' => 'Computes the intersection of arrays with additional index check, compares indexes by a callbvack function',
        'array_intersect_ukey' => 'Computes the intersection of arrays using a callback function on the keys for comparison',
        'array_is_list' => 'Check whether a given array is a list',
        'array_keys' => 'Return all the keys or a subset of the keys of an array',
        'array_key_exists' => 'Checks if the given key or index exists in the array',
        'array_key_first' => 'Gets the first key of an array',
        'array_key_last' => 'Gets the last key of an array',
        'array_map' => 'Applies the callback to the elements of the give arrays',
        'array_merge' => 'Merge one or more arrays',
        'array_merge_recursive' => 'Merge one or more arrays recursively',
        'array_multisort' => 'Sort multiple or multi-dimensional arrays',
        'array_pad' => 'Pad array to the specified length with a value',
        'array_pop' => 'Pop the element off the end of array',
        'array_product' => 'Calculate the product of values in an array',
        'array_push' => 'Push on or more elements onto the end of array',
        'array_rand' => 'Pick one or more random keys out of an array',
        'array_reduce' => 'Iteratively reduce the array to a single value using a callback function',
        'array_replace' => 'Replace elements from passed arays into the first array',
        'array_replace_recursive' => 'Replaces elements from passed arrays into the first array recursively',
        'array_reverse' => 'Return an aray withv elements in reverse order',
        'array_search' => 'Searches the array for a given valkue and returns the vfirst corrresponding key if successful',
        'array_shift' => 'Shift an elemnt off the beginning of array',
        'array_slice' => 'Extract a slice of the array',
        'array_splice' => 'Remove a portion of the array and replace it with something else',
        'array_sum' => 'Calculate the sum of values in an array',
        'array_udiff' => 'Computes the difference of arrays by using a callback function for data comparison',
        'array_udiff_assoc' => 'Computes the difference of arrays with additional index check, compares data by a callback funcrtion',
        'array_udiff_uassoc' => 'Computes the difference of arrays with additional index check, compares datra and ndexes by callvback function',
        'array_uintersect' => 'Computes the intersection of arrays, compares date by a callbvack function',
        'array_uintersect_assoc' => 'Computes the of arays witrh adsditinal index check, comopares data by a callback function',
        'array_uintersect_uassoc' => 'Computes the intersection of arrays with additional index check, compares data and indexed by separate callback functions',
        'array_unique' => 'Removes duplicate values from an array',
        'array_unshift' => 'Prepend one or more elements to the beginning of an array',
        'array_values' => 'Return all the values of an array',
        'array_walk' => 'Apply a user supplied function to evry membr of an array',
        'array_walk_revursive' => 'Apply a user function recursively to every member of an array',
        'arsort' => 'Sort an array in descending order and maintain index association',
        'asin' => 'Arc sine',
        'asinh' => 'Inverse hyperbolic sine',
        'asort' => 'Sort an array in ascending order and maintain index association',
        'assert' => 'Checks if assertion is false',
        'assert_options' => 'Set/get the various assert flags',
        'atan' => 'Arc tangent',
        'atan2' => 'Arc tangent of two variables',
        'atanh' => 'Inverse hyperbolic tangent',










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































    );
}
